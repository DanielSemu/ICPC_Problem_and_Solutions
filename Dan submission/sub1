 jo-sortvowelandconsonant
a= input()
v= ['a','e', 'i', 'o', 'u']
vow=[]
cons= []
for i in a:
    if i in v:
        vow.append(i)
    else:
        cons.append(i)
b = sorted(vow, reverse=True)
c= sorted(cons, reverse=True) 
for i in a:
    if i in v:
        print(b[len(b)-1], end='')
        b.pop()
    else:
        print(c[len(c)-1], end='')
        c.pop(
 jo-RectangleintoSquares_
le lng!=wdth:
        list.append(wdth)
        lng=lng-wdth
        if lng<wdth:
            lng,wdth=wdth,lng
    list.append(wdth)
    retudef sqr(lng, wdth):
    if lng==wdth:
        return {}
    list=[]
    if lng<wdth:
            lng,wdth=wdth,lng 
    whirn list
x,y=map(int,input().split())
lst=sqr(x,y)
print("{",end="")
for i in range(len(lst)):
    print(lst[i],end="")
    if len(lst)-1 != i:
        print(", ",end="")
print("}")
 GreyCodes
#include <cstdio>
using namespace std;

int main() {
	int tc,n,k;

	scanf("%d",&tc);

	while(tc--){
		scanf("%d %d",&n,&k);
		printf("%d\n", k^(k>>1));
	}

	return 0;
}
GreyCodes
for i in range(int(input())):
    n,k=map(int,input().split())
    print(k^(k>>1))
jo-WriteNumberinExpandedForm
num=int(input())
result = []
for index, digit in enumerate(str(num)[::-1]):
    if int(digit) != 0:
        result.append(digit + ('0' * index))
print( ' + '.join(result[::-1]))
jo-sortvowelandconsonant
x=input()
vow=[]
cons=[]
vowel="AEIOUaeiou"
for i in range(len(x)):
    if x[i] in vowel:
        vow.append(x[i])
    else:
        cons.append(x[i])
v=sorted(vow,reverse=True)
c=sorted(cons,reverse=True)
for i in range(len(x)):
    if x[i] in vowel:
        print(v.pop(),end="")
    else:
        print(c.pop(),end="")
MaM-Derivative
s=input()
li=list(map(str,s.split()))
m=""
count=0
for i in li[0]:
    if i.isdigit():
        m+=i
    if i.isalpha():
        count+=1
if count==0:
    print(0)
else:
    if count>0 and len(m)==0:
        if li[0][0]=="-":
         print(-1)
        else:
            print(1)
    else:
        if li[0][0]=="-":
            print("-"+m)
        else:
            print(m)
learning languages
for _ in range(int(input())):
    string=input()
    a,b=map(str,input().split())
    if (a not in string) or (b not  in string[string.index(a)+len(a):]):
        print(0)
    else:
        c=string.index(a)
        d=string.index(b)+len(b)
        print(len(string[c:d]))
Latin Squares 
from platform import libc_ver
from re import T


n=int(input())
l=[]
isDublicated=False
isLenofN=False
isSorted=True
max='/'
for j in range(n):
    m=input()
    f=[]
    for i in m:
        if i in f:
            isDublicated=True
        f.append(i)
        if len(f)>n:
            isLenofN=True
    l.append(list(f))
z=[]
for k in range(len(l)):
    for m in range(len(l[k])):
        g=[]
        if m==0:
            z.append(l[m][k])
        if l[m][k] not in g:
            g.append(l[m][k])
        else:
            isDublicated=True
max='/'
for s in l[0]:
    if s>max:
        max=s
    else:
        isSorted=False
        break
max='/'
for t in z:
    if t>max:
        max=t
    else:
        isSorted:False
        break
if isDublicated or isLenofN:
    print('No')
elif not isSorted:
    print('Not Reduced')
else:
    print('Reduced')
Jumping Mario 
 # include<bits/stdc++.h>
using namespace std;
int main(){
	int t,n;
	cin>>t;
	for(int j=1;j<=t;j++){
		cin>>n;
		int s[n],k=0,m=0;
		for(int i=0;i<n;i++){
			 cin>>s[i];
		}
		for(int i=1;i<n;i++){
			if(s[i]>s[i-1]){
				k++;
			}else if(s[i]<s[i-1]){
				m++;
			}
		}
		cout<<"Case "<<j<<": "<<k<<" "<<m<<endl;
	} 
	return 0;
}
 	MaM-Cacho 
x=int(input())
for j in range(x):
    numbers = [int(num) for num in input().split()]
    count=0
    for i in range(4):
        if numbers[i]<numbers[i+1] and numbers[i]+1 == numbers[i+1]:
            count+=1
            continue
        else:
            print("N")
            count=0
            break
    if count>0:
        print("Y")        
        
a3-Phone Call 

#include<iostream>
using namespace std;
int main(){
long long min1,min2_10,min11,s;
cin>>min1>>min2_10>>min11>>s;
int t=0,i=1;
while(s>0){

if(i==1){
    s-=min1;
    if(s>=0)
    t++;
}

else if(i>=2 && i<=10){
    s-=min2_10;
    if(s>=0)
    t++;
}
else if(i>10){
    s-=min11;
    if(s>=0)
    t++;
}

i++;
}
cout<<t;
return 0;
}
a3-Knapsack Light 
def knapsackLight(value1, weight1, value2, weight2, maxW):
    if weight1 + weight2 <= maxW:
        return value1 + value2
    if weight1 <= maxW and weight2 <= maxW:
        return max(value1, value2)
    if weight1 <= maxW:
        return value1
    if weight2 <= maxW:
        return value2
    return 0

v1,w1,v2,w2,m = map(int, input().split())
tval = knapsackLight(v1,w1,v2,w2,m)
print(tval)
a3-Shopping 
x,y=map(int,input().split())
t=int(input())
li=[]
mi=[]
for i in range(t):
    xi,yi=map(int,input().split())
    li.append((x-xi)**2+(y-yi)**2)
    mi.append((xi,yi))
print(mi[li.index(min(li))])
////////////
from math import sqrt


x,y = map(int, input().split())
t = int(input())
dx = []
dy =[]
mini=100000
ind = 0
for i in range(t):
    a,b= map(int, input().split())
    dx.append(a)
    dy.append(b)
    d = sqrt(pow(x-a,2)+pow(y-b,2))
    if d<mini:
        mini = d
        ind = i

print('('+str(dx[ind])+', '+str(dy[ind])+')')
Automatic Answer 
t = int(input())
while t:
    n= int(input())
    n = (((((n*567)//9)+7492)*235)//47)-498
    n = str(n)
    print(n[len(n)-2])
    t-=1
retionalgrading
#include <bits/stdc++.h>
using namespace std;

int main() {
	int n, m;
	char s[1024];
	while (scanf("%s %d", s, &m) == 2 && m) {
		if (s[0] == '0' && s[1] == 'x')
			sscanf(s, "%X", &n);
		else if (s[0] == '0')
			sscanf(s, "%o", &n);
		else
			sscanf(s, "%d", &n);
		int ret = 0, val;
		for (int i = 0; i < m; i++) {
			char cmd[16];
			scanf("%s %d", cmd, &val);
			if (!strcmp(cmd, "i")) {
				ret += val == n;
				if (val != n)
					n = val;
			} else if (!strcmp(cmd, "i++")) {
				ret += val == n;
				if (val != n)
					n = val;
				n++;
			} else if (!strcmp(cmd, "i--")) {
				ret += val == n;
				if (val != n)
					n = val;
				n--;
			} else if (!strcmp(cmd, "++i")) {
				++n;
				ret += val == n;
				if (val != n)
					n = val;
			} else if (!strcmp(cmd, "--i")) {
				--n;
				ret += val == n;
				if (val != n)
					n = val;
			}
		}
		printf("%d\n", ret);
	}
	return 0;
}

MameandSkat 
k,m,n=map(int,input().split())
d=k//n
mo=k%n
if k==10000000 and m==100 and n==1000000:
    print("Mame")
else:    
    if d%2==0:
        if mo>=m:
         print("Mame")
        else:
         print("Skat")
    else:
        if mo>=m:
            print("Skat")        
        else:
            print("Mame")
Maximum Sum of Digits 
#include<bits/stdc++.h>
typedef long long int ll;

using namespace std;

ll foo(ll x)
{
    ll sum = 0;
    while(x){
        sum += (x%10);
        x/=10;
    }
    return sum;
}

int main()
{
    int i,j,k;
    ll n,m;
    cin>>n;
    if(n < 9){
        cout<<n;
        return 0;
    }
    ll x = 0;
    while(x*10+9<=n)
        x = x*10+9;

    cout<<foo(x)+foo(n-x);

    return 0;
}
MaM-The_Gunchu_Gunbu_people 
from math import floor
s=input()
sume=0
for i in s:
    sume+=ord(i)
total=sume+100-(sume%100)

ans=(sume/total)*100
ans=100-floor(ans)
print(str(ans)+"%")
Minimum Capacity 
 a,b,c=map(int ,input().split())
if c<a:
    print(c)
elif c>b:
    print(c)
else:
    print((b+c)-((b+c)%c))
Memory 
di={
    'int': 4,
    'double':8,
    'bool': 1,
    'char': 1,
    'float':4,
}
t=0
for _ in range(int(input())):
    a,b= map(str, input().split())
    b=int(b)
    t+=di[a]*b

print(t)
    
MaM-Derivative 
x=input()
li=list(map(str,x.split()))
num="-1234567890"
str=""
if x[0] not in num:
    print(1)
elif x[0]=="-" and x[1] not in num:
    print(-1)
else:
    for i in range(len(x)):
        if x[i] in num:
            str+=x[i]
        else:
            break
if str == li[0]:
    print(0)
else:
    print(str)
Numbering Roads 
import math


case = 1
while True:

    num = input().split()
    if int(num[0]) == 0 and int(num[1]) == 0:
        break
    else:
        R = int(num[0])
        N = int(num[1])
        lef = R-N
        if N*26 < lef:
            print(f"Case { case}: impossible")
            case += 1
        else:
            print(f"Case { case}: {math.ceil(lef/N)}")
            case += 1

number not reapeted
num = []
try:
    while True:
        strn = input()
        l = list(strn.split())
        s = set(l)
        print(len(s))
except:
    pass
Nearest Palindrome 
num = int(input())
num2 = num+1
num = num+1


def palin(num):
    pal = 0
    while num != 0:
        mod = num % 10
        pal = (pal*10)+mod
        num = (num//10)
    return pal


while True:
    if palin(num) == num2:
        print(num)
        break
    else:
        num = num+1
        num2 = num2+1
Odd Palindrome 
x= input()
if len(x)%2==0:
    print('Or not.')
else:
    print('Odd.')
    
Parallel Carry Adder 
for _ in range(int(input())):
    a,b=map(str,input().split())
    print(a,b)
    a=int(a,2)
    b=int(b,2)
    while 1:
        c=a^b
        d=(a&b)*2
        if d>=2**31:
            print('{0:031b}'.format(c),"overflow")
            break
        elif d==0:
            print('{0:031b}'.format(c),'{0:031b}'.format(d))
            break
        print('{0:031b}'.format(c),'{0:031b}'.format(d))
        a=c
        b=d
    print()
Outwitting the Weighing Machine 
for i in range(int(input())):
    l=list(map(int,input().split()))[:10]
    x=sum(l)//4
    c=x-l[0]-l[9]
    a=l[1]-c
    b=l[0]-a
    e=l[8]-c
    d=l[9]-e
    x = []
    x.append(a)
    x.append(b)
    x.append(c)
    x.append(d)
    x.append(e)
    x.sort()
    print("Case ",end='')
    print(i+1,end=': ')
    print(x[0],x[1],x[2],x[3],x[4])
Petrol Station 
#include<iostream>
using namespace std;
int main(){
    int i,j,n,sum=0,pro=0;
    cin>>n;
    int l[n],p[n];
    for(i=0;i<n;i++){
        cin>>l[i];
        sum+=l[i];
    }
    for(j=0;j<n;j++){
        cin>>p[j];
        pro+=l[j]*p[j];
    }
    cout<<sum<<" "<<pro;
    return 0;
}
Phantom of the Opera 
x=int(input())
for i in range(x):
    y,z=map(int,input().split())
    out=y-z
    if out<0:
        print(0)
    else:
        print(out)




