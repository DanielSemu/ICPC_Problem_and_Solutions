(1),seive to find kth prime number   this will print 5000000th prime number
vector<int>prime1;
void isprime(){
    int n=90000000;//n=87000000
    bool arr[n+1];
    arr[0]=arr[1]=true;
    int p=2;
    for(int p=2; p*p<=n; p++){
        if(!arr[p]){
            for(int i=p*p; i<=n; i+=p){
                arr[i]=true;
            }
        }
    }
    for(int i=2; i<=n; i++){
        if(!arr[i])
        prime1.push_back(i);
    }
}
(2),How to print a prime factor of a number?
Naive solution: 
void primeFactors(int n) 
{ 
    while (n%2 == 0) 
    { 
        printf("%d ", 2); 
        n = n/2; 
    } 
    for (int i = 3; i <= sqrt(n); i = i+2) 
    { 
        while (n%i == 0) 
        { 
            printf("%d ", i); 
            n = n/i; 
        } 
    } 
    if (n > 2) 
        printf ("%d ", n); 
} 
(3),///to print all prime numbers less than or equal to n using seive 
void isprime(int n){
    bool arr[n+1];//when we declare boolean array it is flase by defalut 
    //flase means it if prime true means it is not prime
    arr[0]=arr[1]=true;
    int p=2;
    for(int p=2; p*p<=n; p++){
        if(!arr[p]){
            for(int i=p*p; i<=n; i+=p){
                arr[i]=true;
            }
        }
    }
    for(int i=2; i<=n; i++){
        if(!arr[i])
        prime1.push_back(i);
    }
}
Algorithms for Competitive Programming Binary Exponentiation
///Using recurtion formula
long long int binpow(long long int a, long long int b) {
    if (b == 0)
        return 1;
    long long res = binpow(a, b / 2);
    if (b % 2)
        return res * res * a;
    else
        return res * res;
}
//left shift and right shift
//right shift
//(x>>y)‘ is equivalent to dividing x with 2^y. 
//left shift
//(x<<y)’ is equivalent to multiplying x with 2^y (2 raised to power y). 
int power(int x, int y, int p)
{
    int res = 1;
    while (y > 0) {
        if (y % 2 == 1)
            res = (res * x);
        y = y >> 1;
        x = (x * x);
    }
    return res;//this returns 
    return res % p;
}
